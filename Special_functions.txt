List[RuleDelayed[HoldPattern[Int[Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Erf[Plus[a, Times[b, x]]], Power[b, -1]], x], Simp[Times[1, Power[Times[b, Sqrt[Pi], Power[E, Power[Plus[a, Times[b, x]], 2]]], -1]], x]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Erfc[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[1, Power[Times[b, Sqrt[Pi], Power[E, Power[Plus[a, Times[b, x]], 2]]], -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Erfi[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Power[E, Power[Plus[a, Times[b, x]], 2]], Power[Times[b, Sqrt[Pi]], -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Erf[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[2, b, x, Power[Sqrt[Pi], -1], HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[-1, Power[b, 2], Power[x, 2]]]], x], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[Erfc[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Log[x], x], Times[-1, Int[Times[Erf[Times[b, x]], Power[x, -1]], x]]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[Erfi[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[2, b, x, Power[Sqrt[Pi], -1], HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[Power[b, 2], Power[x, 2]]]], x], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Erf[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[Power[E, Power[Plus[a, Times[b, x]], 2]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Erfc[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Dist[Times[2, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[Power[E, Power[Plus[a, Times[b, x]], 2]], -1]], x], x]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Erfi[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Power[Plus[a, Times[b, x]], 2]]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Times[-1, Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfc[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]], x], x]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfi[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Times[-1, Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Power[E, Plus[Power[a, 2], c, Times[2, a, b, x], Times[Plus[Power[b, 2], d], Power[x, 2]]]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, -1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Plus[Times[-1, Dist[Times[Plus[m, -1], Power[Times[2, d], -1]], Int[Times[Power[x, Plus[m, -2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Greater[m, 1]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, -1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfc[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Plus[Times[-1, Dist[Times[Plus[m, -1], Power[Times[2, d], -1]], Int[Times[Power[x, Plus[m, -2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfc[Plus[a, Times[b, x]]]], x], x]], Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]]], x], x]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Greater[m, 1]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, -1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfi[Plus[a, Times[b, x]]], Power[Times[2, d], -1]], x], Plus[Times[-1, Dist[Times[Plus[m, -1], Power[Times[2, d], -1]], Int[Times[Power[x, Plus[m, -2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfi[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[b, Power[Times[d, Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[E, Plus[Power[a, 2], c, Times[2, a, b, x], Times[Plus[Power[b, 2], d], Power[x, 2]]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Greater[m, 1]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erf[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[2, b, Power[E, c], x, Power[Sqrt[Pi], -1], HypergeometricPFQ[List[Times[1, Power[2, -1]], 1], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[d, Power[x, 2]]]], x], And[FreeQ[b, x], ZeroQ[Plus[d, Times[-1, Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfc[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Int[Times[Power[E, Plus[c, Times[d, Power[x, 2]]]], Power[x, -1]], x], Times[-1, Int[Times[Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Times[b, x]], Power[x, -1]], x]]], And[FreeQ[b, x], ZeroQ[Plus[d, Times[-1, Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfi[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[2, b, Power[E, c], x, Power[Sqrt[Pi], -1], HypergeometricPFQ[List[Times[1, Power[2, -1]], 1], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[d, Power[x, 2]]]], x], And[FreeQ[b, x], ZeroQ[Plus[d, Power[b, 2]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erf[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[2, b, Power[Times[Plus[m, 1], Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfc[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfc[Plus[a, Times[b, x]]]], x], x]], Dist[Times[2, b, Power[Times[Plus[m, 1], Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[Times[-1, Power[a, 2]], c, Times[-1, 2, a, b, x], Times[-1, Plus[Power[b, 2], Times[-1, d]], Power[x, 2]]]]], x], x]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfi[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Power[E, Plus[c, Times[d, Power[x, 2]]]], Erfi[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[2, b, Power[Times[Plus[m, 1], Sqrt[Pi]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[Power[a, 2], c, Times[2, a, b, x], Times[Plus[Power[b, 2], d], Power[x, 2]]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Power[Erf[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Erf[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[Times[4, Power[Sqrt[Pi], -1]], Int[Times[Plus[a, Times[b, x]], Erf[Plus[a, Times[b, x]]], Power[Power[E, Power[Plus[a, Times[b, x]], 2]], -1]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[Erfc[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Erfc[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Dist[Times[4, Power[Sqrt[Pi], -1]], Int[Times[Plus[a, Times[b, x]], Erfc[Plus[a, Times[b, x]]], Power[Power[E, Power[Plus[a, Times[b, x]], 2]], -1]], x], x]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[Erfi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Erfi[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[Times[4, Power[Sqrt[Pi], -1]], Int[Times[Plus[a, Times[b, x]], Power[E, Power[Plus[a, Times[b, x]], 2]], Erfi[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Erf[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Erf[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[4, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Times[-1, Power[b, 2], Power[x, 2]]], Erf[Times[b, x]]], x], x]]], And[FreeQ[b, x], IntegerQ[m], Unequal[m, -1], Or[Greater[m, 0], OddQ[m]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Erfc[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Erfc[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Dist[Times[4, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Times[-1, Power[b, 2], Power[x, 2]]], Erfc[Times[b, x]]], x], x]], And[FreeQ[b, x], IntegerQ[m], Unequal[Plus[m, 1], 0], Or[Greater[m, 0], OddQ[m]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Erfi[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Erfi[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[4, b, Power[Times[Sqrt[Pi], Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Times[Power[b, 2], Power[x, 2]]], Erfi[Times[b, x]]], x], x]]], And[FreeQ[b, x], IntegerQ[m], Unequal[Plus[m, 1], 0], Or[Greater[m, 0], OddQ[m]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Erf[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[Times[Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], Power[Erf[x], 2]], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Erfc[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[Times[Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], Power[Erfc[x], 2]], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Erfi[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[Times[Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], Power[Erfi[x], 2]], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[FresnelS[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], FresnelS[Plus[a, Times[b, x]]], Power[b, -1]], x], Simp[Times[Cos[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]], Power[Times[b, Pi], -1]], x]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[FresnelC[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], FresnelC[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Sin[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]], Power[Times[b, Pi], -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[1, Power[2, -1], I, b, x, HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[-1, Power[2, -1], I, Power[b, 2], Pi, Power[x, 2]]]], x], Times[-1, Simp[Times[1, Power[2, -1], I, b, x, HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[1, Power[2, -1], I, Power[b, 2], Pi, Power[x, 2]]]], x]]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[-1, Power[2, -1], I, Power[b, 2], Pi, Power[x, 2]]]], x], Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[Times[1, Power[2, -1]], Times[1, Power[2, -1]]], List[Times[3, Power[2, -1]], Times[3, Power[2, -1]]], Times[1, Power[2, -1], I, Power[b, 2], Pi, Power[x, 2]]]], x]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[FresnelS[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], FresnelS[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelC[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], FresnelC[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Power[FresnelS[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[FresnelS[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Plus[a, Times[b, x]], Sin[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]], FresnelS[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[FresnelC[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[FresnelC[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Plus[a, Times[b, x]], Cos[Times[Pi, Power[2, -1], Power[Plus[a, Times[b, x]], 2]]], FresnelC[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[FresnelS[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]]], x], x]]], And[FreeQ[b, x], IntegerQ[m], Unequal[Plus[m, 1], 0], Or[And[Greater[m, 0], EvenQ[m]], Equal[Mod[m, 4], 3]]]]], RuleDelayed[HoldPattern[Int[Times[Power[FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[FresnelC[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]]], x], x]]], And[FreeQ[b, x], IntegerQ[m], Unequal[Plus[m, 1], 0], Or[And[Greater[m, 0], EvenQ[m]], Equal[Mod[m, 4], 3]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[x, Blank[]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x]], Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Sin[Times[Pi, Power[b, 2], Power[x, 2]]], x], x]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[x, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x], Times[-1, Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Sin[Times[Pi, Power[b, 2], Power[x, 2]]], x], x]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, Plus[m, -1]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x]], Plus[Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Times[Power[x, Plus[m, -1]], Sin[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x], Dist[Times[Plus[m, -1], Power[Times[Pi, Power[b, 2]], -1]], Int[Times[Power[x, Plus[m, -2]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]]], x], x]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Greater[m, 1], Not[Equal[Mod[m, 4], 2]]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, -1]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x], Plus[Times[-1, Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Times[Power[x, Plus[m, -1]], Sin[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x]], Times[-1, Dist[Times[Plus[m, -1], Power[Times[Pi, Power[b, 2]], -1]], Int[Times[Power[x, Plus[m, -2]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]]], x], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Greater[m, 1], Not[Equal[Mod[m, 4], 2]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[Pi, Power[b, 2], Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]]], x], x]], Dist[Times[b, Power[Times[2, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x], Times[-1, Simp[Times[b, Power[x, Plus[m, 2]], Power[Times[2, Plus[m, 1], Plus[m, 2]], -1]], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Less[m, -2], Equal[Mod[m, 4], 0]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Plus[m, 1], -1]], x], Plus[Dist[Times[Pi, Power[b, 2], Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]]], x], x], Times[-1, Dist[Times[b, Power[Times[2, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x]], Times[-1, Simp[Times[b, Power[x, Plus[m, 2]], Power[Times[2, Plus[m, 1], Plus[m, 2]], -1]], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Less[m, -2], Equal[Mod[m, 4], 0]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[x, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x], Plus[Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Cos[Times[Pi, Power[b, 2], Power[x, 2]]], x], x], Times[-1, Simp[Times[x, Power[Times[2, Pi, b], -1]], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[x, Blank[]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x]], Plus[Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Cos[Times[Pi, Power[b, 2], Power[x, 2]]], x], x], Simp[Times[x, Power[Times[2, Pi, b], -1]], x]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, -1]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x], Plus[Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Times[Power[x, Plus[m, -1]], Cos[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x], Times[-1, Dist[Times[Plus[m, -1], Power[Times[Pi, Power[b, 2]], -1]], Int[Times[Power[x, Plus[m, -2]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]]], x], x]], Times[-1, Simp[Times[Power[x, m], Power[Times[2, b, m, Pi], -1]], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Greater[m, 1], Not[Equal[Mod[m, 4], 0]]]]], RuleDelayed[HoldPattern[Int[Times[FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, Plus[m, -1]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Times[Pi, Power[b, 2]], -1]], x]], Plus[Dist[Times[1, Power[Times[2, Pi, b], -1]], Int[Times[Power[x, Plus[m, -1]], Cos[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x], Dist[Times[Plus[m, -1], Power[Times[Pi, Power[b, 2]], -1]], Int[Times[Power[x, Plus[m, -2]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]]], x], x], Simp[Times[Power[x, m], Power[Times[2, b, m, Pi], -1]], x]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Greater[m, 1], Not[Equal[Mod[m, 4], 0]]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], FresnelS[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]], Power[Plus[m, 1], -1]], x], Plus[Dist[Times[Pi, Power[b, 2], Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelS[Times[b, x]]], x], x], Times[-1, Dist[Times[b, Power[Times[2, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Less[m, -1], Equal[Mod[m, 4], 2]]]], RuleDelayed[HoldPattern[Int[Times[FresnelC[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[Pi, Power[b, 2], Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 2]], Cos[Times[Pi, Power[2, -1], Power[b, 2], Power[x, 2]]], FresnelC[Times[b, x]]], x], x]], Times[-1, Dist[Times[b, Power[Times[2, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Times[Pi, Power[b, 2], Power[x, 2]]]], x], x]]]], And[FreeQ[List[b, c], x], ZeroQ[Plus[c, Times[-1, Pi, Power[2, -1], Power[b, 2]]]], IntegerQ[m], Less[m, -1], Equal[Mod[m, 4], 2]]]], RuleDelayed[HoldPattern[Int[ExpIntegralE[Pattern[n, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Simp[Times[ExpIntegralE[Plus[n, 1], Plus[a, Times[b, x]]], Power[b, -1]], x]], FreeQ[List[a, b, n], x]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, m], ExpIntegralE[Plus[n, 1], Times[b, x]], Power[b, -1]], x]], Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], ExpIntegralE[Plus[n, 1], Times[b, x]]], x], x]], And[FreeQ[b, x], ZeroQ[Plus[m, n]], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[1, Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[-1, b, x]]], x], Plus[Times[-1, Simp[Times[EulerGamma, Log[x]], x]], Times[-1, Simp[Times[1, Power[2, -1], Power[Log[Times[b, x]], 2]], x]]]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], ExpIntegralE[n, Times[b, x]], Power[Plus[m, 1], -1]], x], Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], ExpIntegralE[Plus[n, -1], Times[b, x]]], x], x]], And[FreeQ[b, x], ZeroQ[Plus[m, n]], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Gamma[Plus[m, 1]], Log[x], Power[Times[b, Power[Times[b, x], m]], -1]], x], Times[-1, Simp[Times[Power[x, Plus[m, 1]], HypergeometricPFQ[List[Plus[m, 1], Plus[m, 1]], List[Plus[m, 2], Plus[m, 2]], Times[-1, b, x]], Power[Power[Plus[m, 1], 2], -1]], x]]], And[FreeQ[List[b, m, n], x], ZeroQ[Plus[m, n]], Not[IntegerQ[m]]]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], ExpIntegralE[n, Times[b, x]], Power[Plus[m, n], -1]], x], Times[-1, Simp[Times[Power[x, Plus[m, 1]], ExpIntegralE[Times[-1, m], Times[b, x]], Power[Plus[m, n], -1]], x]]], And[FreeQ[List[b, m, n], x], NonzeroQ[Plus[m, n]]]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, m], ExpIntegralE[Plus[n, 1], Plus[a, Times[b, x]]], Power[b, -1]], x]], Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], ExpIntegralE[Plus[n, 1], Plus[a, Times[b, x]]]], x], x]], And[FreeQ[List[a, b, m, n], x], Or[PositiveIntegerQ[m], NegativeIntegerQ[n], And[RationalQ[m, n], Greater[m, 0], Less[n, -1]]]]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralE[Pattern[n, Blank[]], Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], ExpIntegralE[n, Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], ExpIntegralE[Plus[n, -1], Plus[a, Times[b, x]]]], x], x]], And[FreeQ[List[a, b, m], x], Or[PositiveIntegerQ[n], And[RationalQ[m, n], Less[m, -1], Greater[n, 0]]], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[ExpIntegralEi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], ExpIntegralEi[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Power[E, Plus[a, Times[b, x]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[ExpIntegralEi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], ExpIntegralEi[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[a, Times[b, x]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Power[ExpIntegralEi[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[ExpIntegralEi[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[ExpIntegralEi[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[ExpIntegralEi[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Power[E, Times[b, x]], ExpIntegralEi[Times[b, x]]], x], x]]], And[FreeQ[b, x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[ExpIntegralEi[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[ExpIntegralEi[Plus[a, Times[b, x]]], 2], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[a, m, Power[Times[b, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[ExpIntegralEi[Plus[a, Times[b, x]]], 2]], x], x]], Simp[Times[a, Power[x, m], Power[ExpIntegralEi[Plus[a, Times[b, x]]], 2], Power[Times[b, Plus[m, 1]], -1]], x]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], ExpIntegralEi[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[E, Plus[a, c, Times[Plus[b, d], x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], ExpIntegralEi[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Power[E, Plus[a, c, Times[Plus[b, d], x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[E, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], ExpIntegralEi[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[a, Times[b, x]]], ExpIntegralEi[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Power[E, Plus[a, c, Times[Plus[b, d], x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[LogIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], LogIntegral[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[ExpIntegralEi[Times[2, Log[Plus[a, Times[b, x]]]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[LogIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[b, x], x]], Simp[Times[Log[Times[b, x]], LogIntegral[Times[b, x]]], x]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[LogIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], LogIntegral[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Power[Log[Plus[a, Times[b, x]]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[SinIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], SinIntegral[Plus[a, Times[b, x]]], Power[b, -1]], x], Simp[Times[Cos[Plus[a, Times[b, x]]], Power[b, -1]], x]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[CosIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], CosIntegral[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Sin[Plus[a, Times[b, x]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], SinIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[-1, I, b, x]]], x], Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[I, b, x]]], x]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[CosIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[2, -1], I, b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[-1, I, b, x]]], x]], Plus[Simp[Times[1, Power[2, -1], I, b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[I, b, x]]], x], Simp[Times[EulerGamma, Log[x]], x], Simp[Times[1, Power[2, -1], Power[Log[Times[b, x]], 2]], x]]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], SinIntegral[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[CosIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], CosIntegral[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Power[SinIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[SinIntegral[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[CosIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[CosIntegral[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[SinIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[SinIntegral[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Sin[Times[b, x]], SinIntegral[Times[b, x]]], x], x]]], And[FreeQ[b, x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[CosIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[CosIntegral[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Cos[Times[b, x]], CosIntegral[Times[b, x]]], x], x]]], And[FreeQ[b, x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[SinIntegral[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[SinIntegral[Plus[a, Times[b, x]]], 2], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[a, m, Power[Times[b, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[SinIntegral[Plus[a, Times[b, x]]], 2]], x], x]], Simp[Times[a, Power[x, m], Power[SinIntegral[Plus[a, Times[b, x]]], 2], Power[Times[b, Plus[m, 1]], -1]], x]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[CosIntegral[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[CosIntegral[Plus[a, Times[b, x]]], 2], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[a, m, Power[Times[b, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[CosIntegral[Plus[a, Times[b, x]]], 2]], x], x]], Simp[Times[a, Power[x, m], Power[CosIntegral[Plus[a, Times[b, x]]], 2], Power[Times[b, Plus[m, 1]], -1]], x]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Cos[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x]], Dist[Times[d, Power[b, -1]], Int[Times[Cos[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sin[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Sin[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, m], Cos[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x]], Plus[Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Cos[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x], Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Cos[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]]], x], x]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Sin[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Sin[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Sin[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]]], x], x], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Sin[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x]], Dist[Times[d, Power[b, -1]], Int[Times[Cos[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Sin[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, m], Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x]], Plus[Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Cos[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x], Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]]], x], x]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Cos[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], SinIntegral[Plus[c, Times[d, x]]]], x], x], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], Sin[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[CosIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sin[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cos[Plus[a, Times[b, x]]], CosIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sin[Plus[a, Times[b, x]]], Cos[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[SinhIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], SinhIntegral[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Cosh[Plus[a, Times[b, x]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[CoshIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], CoshIntegral[Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Sinh[Plus[a, Times[b, x]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], SinhIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[-1, b, x]]], x], Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[b, x]]], x]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[CoshIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[-1, b, x]]], x]], Plus[Simp[Times[1, Power[2, -1], b, x, HypergeometricPFQ[List[1, 1, 1], List[2, 2, 2], Times[b, x]]], x], Simp[Times[EulerGamma, Log[x]], x], Simp[Times[1, Power[2, -1], Power[Log[Times[b, x]], 2]], x]]], FreeQ[b, x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinhIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], SinhIntegral[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[CoshIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], CoshIntegral[Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, m], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Power[SinhIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[SinhIntegral[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[CoshIntegral[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[CoshIntegral[Plus[a, Times[b, x]]], 2], Power[b, -1]], x], Times[-1, Dist[2, Int[Times[Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[a, Times[b, x]]]], x], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[SinhIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[SinhIntegral[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Sinh[Times[b, x]], SinhIntegral[Times[b, x]]], x], x]]], And[FreeQ[b, x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[CoshIntegral[Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[CoshIntegral[Times[b, x]], 2], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Cosh[Times[b, x]], CoshIntegral[Times[b, x]]], x], x]]], And[FreeQ[b, x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[SinhIntegral[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[SinhIntegral[Plus[a, Times[b, x]]], 2], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[a, m, Power[Times[b, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[SinhIntegral[Plus[a, Times[b, x]]], 2]], x], x]], Simp[Times[a, Power[x, m], Power[SinhIntegral[Plus[a, Times[b, x]]], 2], Power[Times[b, Plus[m, 1]], -1]], x]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[CoshIntegral[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], 2], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[CoshIntegral[Plus[a, Times[b, x]]], 2], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[2, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[a, Times[b, x]]]], x], x]], Times[-1, Dist[Times[a, m, Power[Times[b, Plus[m, 1]], -1]], Int[Times[Power[x, Plus[m, -1]], Power[CoshIntegral[Plus[a, Times[b, x]]], 2]], x], x]], Simp[Times[a, Power[x, m], Power[CoshIntegral[Plus[a, Times[b, x]]], 2], Power[Times[b, Plus[m, 1]], -1]], x]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Cosh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Cosh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sinh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Sinh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Cosh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Cosh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Cosh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Sinh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Sinh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Sinh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Sinh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Cosh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]], FreeQ[List[a, b, c, d], x]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Sinh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[b, -1]], x], Plus[Times[-1, Dist[Times[d, Power[b, -1]], Int[Times[Power[x, m], Cosh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]]], x], x]]]], And[FreeQ[List[a, b, c, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Cosh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], SinhIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], SinhIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], Sinh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[CoshIntegral[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]], Sinh[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]], Power[Plus[m, 1], -1]], x], Plus[Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Cosh[Plus[a, Times[b, x]]], CoshIntegral[Plus[c, Times[d, x]]]], x], x]], Times[-1, Dist[Times[d, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Sinh[Plus[a, Times[b, x]]], Cosh[Plus[c, Times[d, x]]], Power[Plus[c, Times[d, x]], -1]], x], x]]]], And[FreeQ[List[a, b, c, d], x], IntegerQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Gamma[Pattern[n, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Gamma[n, Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Simp[Times[Gamma[Plus[n, 1], Plus[a, Times[b, x]]], Power[b, -1]], x]]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[Gamma[Pattern[n, Blank[]], Times[Pattern[b, Blank[]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Gamma[n], Log[x]], x], Times[-1, Simp[Times[Power[Times[b, x], n], Power[Power[n, 2], -1], HypergeometricPFQ[List[n, n], List[Plus[1, n], Plus[1, n]], Times[-1, b, x]]], x]]], And[FreeQ[List[b, n], x], Not[And[IntegerQ[n], LessEqual[n, 0]]]]]], RuleDelayed[HoldPattern[Int[Times[Gamma[Pattern[n, Blank[]], Times[Pattern[b, Blank[]], Pattern[x, Blank[]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Gamma[n, Times[b, x]], Power[Plus[m, 1], -1]], x], Times[-1, Simp[Times[Power[x, m], Gamma[Plus[m, n, 1], Times[b, x]], Power[Times[b, Plus[m, 1], Power[Times[b, x], m]], -1]], x]]], And[FreeQ[List[b, m, n], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Gamma[Pattern[n, Blank[]], Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Block[List[Set[$UseGamma, True]], Plus[Simp[Times[Power[x, Plus[m, 1]], Gamma[n, Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Power[Plus[a, Times[b, x]], Plus[n, -1]], Power[Power[E, Plus[a, Times[b, x]]], -1]], x], x]]], And[FreeQ[List[a, b, m, n], x], Or[PositiveIntegerQ[m], PositiveIntegerQ[n], IntegersQ[m, n]], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[LogGamma[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[PolyGamma[-2, Plus[a, Times[b, x]]], Power[b, -1]], x], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Times[LogGamma[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], PolyGamma[-2, Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], PolyGamma[-2, Plus[a, Times[b, x]]]], x], x]]], And[FreeQ[List[a, b], x], RationalQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[PolyGamma[Pattern[n, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[PolyGamma[Plus[n, -1], Plus[a, Times[b, x]]], Power[b, -1]], x], FreeQ[List[a, b, n], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], PolyGamma[Pattern[n, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, m], PolyGamma[Plus[n, -1], Plus[a, Times[b, x]]], Power[b, -1]], x], Times[-1, Dist[Times[m, Power[b, -1]], Int[Times[Power[x, Plus[m, -1]], PolyGamma[Plus[n, -1], Plus[a, Times[b, x]]]], x], x]]], And[FreeQ[List[a, b, n], x], RationalQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], PolyGamma[Pattern[n, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], PolyGamma[n, Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], PolyGamma[Plus[n, 1], Plus[a, Times[b, x]]]], x], x]]], And[FreeQ[List[a, b, n], x], RationalQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Gamma[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Optional[Pattern[n, Blank[]]]], PolyGamma[0, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[Gamma[Plus[a, Times[b, x]]], n], Power[Times[b, n], -1]], x], FreeQ[List[a, b, n], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Factorial[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Optional[Pattern[n, Blank[]]]], PolyGamma[0, Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[Factorial[Plus[a, Times[b, x]]], n], Power[Times[b, n], -1]], x], And[FreeQ[List[a, b, c, n], x], ZeroQ[Plus[a, Times[-1, c], 1]]]]], RuleDelayed[HoldPattern[Int[Zeta[2, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[PolyGamma[1, Plus[a, Times[b, x]]], x], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Zeta[Pattern[s, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Simp[Times[Zeta[Plus[s, -1], Plus[a, Times[b, x]]], Power[Times[b, Plus[s, -1]], -1]], x]], And[FreeQ[List[a, b, s], x], NonzeroQ[Plus[s, -1]], NonzeroQ[Plus[s, -2]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Zeta[2, Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[Power[x, m], PolyGamma[1, Plus[a, Times[b, x]]]], x], And[FreeQ[List[a, b], x], RationalQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Zeta[Pattern[s, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Times[-1, Simp[Times[Power[x, m], Zeta[Plus[s, -1], Plus[a, Times[b, x]]], Power[Times[b, Plus[s, -1]], -1]], x]], Dist[Times[m, Power[Times[b, Plus[s, -1]], -1]], Int[Times[Power[x, Plus[m, -1]], Zeta[Plus[s, -1], Plus[a, Times[b, x]]]], x], x]], And[FreeQ[List[a, b, s], x], NonzeroQ[Plus[s, -1]], NonzeroQ[Plus[s, -2]], RationalQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Zeta[Pattern[s, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Zeta[s, Plus[a, Times[b, x]]], Power[Plus[m, 1], -1]], x], Dist[Times[b, s, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], Zeta[Plus[s, 1], Plus[a, Times[b, x]]]], x], x]], And[FreeQ[List[a, b, s], x], NonzeroQ[Plus[s, -1]], NonzeroQ[Plus[s, -2]], RationalQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, PolyLog[n, Times[a, Power[Times[b, Power[x, p]], q]]]], x], Times[-1, Dist[Times[p, q], Int[PolyLog[Plus[n, -1], Times[a, Power[Times[b, Power[x, p]], q]]], x], x]]], And[FreeQ[List[a, b, p, q], x], RationalQ[n], Greater[n, 0]]]], RuleDelayed[HoldPattern[Int[PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], Power[Times[p, q], -1]], x], Times[-1, Dist[Times[1, Power[Times[p, q], -1]], Int[PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], x], x]]], And[FreeQ[List[a, b, p, q], x], RationalQ[n], Less[n, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[d, Blank[]]], Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], -1], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[PolyLog[Plus[n, 1], Times[c, Power[Plus[a, Times[b, x]], p]]], Power[Times[e, p], -1]], x], And[FreeQ[List[a, b, c, d, e, n, p], x], ZeroQ[Plus[Times[b, d], Times[-1, a, e]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], Power[Times[p, q], -1]], x], FreeQ[List[a, b, n, p, q], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], PolyLog[n, Times[a, Power[Times[b, Power[x, p]], q]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[p, q, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], PolyLog[Plus[n, -1], Times[a, Power[Times[b, Power[x, p]], q]]]], x], x]]], And[FreeQ[List[a, b, m, p, q], x], NonzeroQ[Plus[m, 1]], RationalQ[n], Greater[n, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], Power[Times[p, q], -1]], x], Times[-1, Dist[Times[Plus[m, 1], Power[Times[p, q], -1]], Int[Times[Power[x, m], PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]]], x], x]]], And[FreeQ[List[a, b, m, p, q], x], NonzeroQ[Plus[m, 1]], RationalQ[n], Less[n, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Log[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]]], Optional[Pattern[r, Blank[]]]], Power[Pattern[x, Blank[]], -1], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[a, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Optional[Pattern[q, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[Log[Times[c, Power[x, m]]], r], PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], Power[Times[p, q], -1]], x], Times[-1, Dist[Times[m, r, Power[Times[p, q], -1]], Int[Times[Power[Log[Times[c, Power[x, m]]], Plus[r, -1]], PolyLog[Plus[n, 1], Times[a, Power[Times[b, Power[x, p]], q]]], Power[x, -1]], x], x]]], And[FreeQ[List[a, b, c, m, n, q, r], x], RationalQ[r], Greater[r, 0]]]], RuleDelayed[HoldPattern[Int[PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, PolyLog[n, Times[c, Power[Plus[a, Times[b, x]], p]]]], x], Plus[Times[-1, Dist[p, Int[PolyLog[Plus[n, -1], Times[c, Power[Plus[a, Times[b, x]], p]]], x], x]], Dist[Times[a, p], Int[Times[PolyLog[Plus[n, -1], Times[c, Power[Plus[a, Times[b, x]], p]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, c, p], x], RationalQ[n], Greater[n, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[p, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], PolyLog[n, Times[c, Power[Plus[a, Times[b, x]], p]]], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[b, p, Power[Plus[m, 1], -1]], Int[Times[Power[x, Plus[m, 1]], PolyLog[Plus[n, -1], Times[c, Power[Plus[a, Times[b, x]], p]]], Power[Plus[a, Times[b, x]], -1]], x], x]]], And[FreeQ[List[a, b, c, m, p], x], RationalQ[n], Greater[n, 0], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Power[Pattern[F, Blank[]], Times[Optional[Pattern[c, Blank[]]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[PolyLog[Plus[n, 1], Times[d, Power[Power[F, Times[c, Plus[a, Times[b, x]]]], p]]], Power[Times[b, c, p, Log[F]], -1]], x], FreeQ[List[F, a, b, c, d, n, p], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[e, Blank[]]], Times[Optional[Pattern[f, Blank[]]], Pattern[x, Blank[]]]], Optional[Pattern[m, Blank[]]]], PolyLog[Pattern[n, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Power[Pattern[F, Blank[]], Times[Optional[Pattern[c, Blank[]]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[Plus[e, Times[f, x]], m], PolyLog[Plus[n, 1], Times[d, Power[Power[F, Times[c, Plus[a, Times[b, x]]]], p]]], Power[Times[b, c, p, Log[F]], -1]], x], Times[-1, Dist[Times[f, m, Power[Times[b, c, p, Log[F]], -1]], Int[Times[Power[Plus[e, Times[f, x]], Plus[m, -1]], PolyLog[Plus[n, 1], Times[d, Power[Power[F, Times[c, Plus[a, Times[b, x]]]], p]]]], x], x]]], And[FreeQ[List[F, a, b, c, d, e, f, n, p], x], RationalQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], PolyLog[Pattern[n, Blank[]], Pattern[v, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[w, DerivativeDivides[v, Times[u, v], x]]], Condition[Simp[Times[w, PolyLog[Plus[n, 1], v]], x], Not[FalseQ[w]]]], FreeQ[n, x]]], RuleDelayed[HoldPattern[Int[Times[Log[Pattern[w, Blank[]]], Pattern[u, Blank[]], PolyLog[Pattern[n, Blank[]], Pattern[v, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[z, DerivativeDivides[v, Times[u, v], x]]], Condition[Plus[Simp[Times[z, Log[w], PolyLog[Plus[n, 1], v]], x], Times[-1, Int[SimplifyIntegrand[Times[z, D[w, x], PolyLog[Plus[n, 1], v], Power[w, -1]], x], x]]], Not[FalseQ[z]]]], And[FreeQ[n, x], InverseFunctionFreeQ[w, x]]]], RuleDelayed[HoldPattern[Int[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[p, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], p], Power[Times[b, Plus[p, 1]], -1]], x], Dist[Times[p, Power[Times[c, Plus[p, 1]], -1]], Int[Times[Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], Plus[p, 1]], Power[Plus[1, ProductLog[Plus[a, Times[b, x]]]], -1]], x], x]], And[FreeQ[List[a, b, c], x], RationalQ[p], Less[p, -1]]]], RuleDelayed[HoldPattern[Int[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], p], Power[b, -1]], x], Times[-1, Dist[p, Int[Times[Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], p], Power[Plus[1, ProductLog[Plus[a, Times[b, x]]]], -1]], x], x]]], And[FreeQ[List[a, b, c], x], Not[And[RationalQ[p], Less[p, -1]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[ExpandIntegrand[Power[Times[c, ProductLog[x]], p], Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], x], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b, c, p], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p]], x], Times[-1, Dist[Times[n, p], Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Plus[1, ProductLog[Times[a, Power[x, n]]]], -1]], x], x]]], And[FreeQ[List[a, c, n, p], x], Or[ZeroQ[Plus[Times[n, Plus[p, -1]], 1]], And[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], ZeroQ[Plus[Times[n, Plus[p, Times[-1, 1, Power[2, -1]]]], 1]]]]]]], RuleDelayed[HoldPattern[Int[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Plus[Times[n, p], 1], -1]], x], Dist[Times[n, p, Power[Times[c, Plus[Times[n, p], 1]], -1]], Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, 1]], Power[Plus[1, ProductLog[Times[a, Power[x, n]]]], -1]], x], x]], And[FreeQ[List[a, c, n], x], Or[And[IntegerQ[p], ZeroQ[Plus[Times[n, Plus[p, 1]], 1]]], And[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], ZeroQ[Plus[Times[n, Plus[p, Times[1, Power[2, -1]]]], 1]]]]]]], RuleDelayed[HoldPattern[Int[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, Times[-1, n]]]]], p], Power[Power[x, 2], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, c, p], x], NegativeIntegerQ[n]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Plus[m, 1], -1]], x], Times[-1, Dist[Times[n, p, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Plus[1, ProductLog[Times[a, Power[x, n]]]], -1]], x], x]]], And[FreeQ[List[a, c, m, n, p], x], NonzeroQ[Plus[m, 1]], Or[And[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], IntegerQ[Times[2, Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]]]], Greater[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 0]], And[Not[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]]], IntegerQ[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]]], GreaterEqual[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 0]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Plus[m, Times[n, p], 1], -1]], x], Dist[Times[n, p, Power[Times[c, Plus[m, Times[n, p], 1]], -1]], Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, 1]], Power[Plus[1, ProductLog[Times[a, Power[x, n]]]], -1]], x], x]], And[FreeQ[List[a, c, m, n, p], x], Or[ZeroQ[Plus[m, 1]], And[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], IntegerQ[Plus[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], Times[-1, 1, Power[2, -1]]]], Less[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 0]], And[Not[IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]]], IntegerQ[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]]], Less[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 0]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, x]]], p], Power[Plus[1, ProductLog[Times[a, x]]], -1]], x], Dist[Times[1, Power[c, -1]], Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, x]]], Plus[p, 1]], Power[Plus[1, ProductLog[Times[a, x]]], -1]], x], x]], FreeQ[List[a, c, m], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, Times[-1, n]]]]], p], Power[Power[x, Plus[m, 2]], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, c, p], x], IntegersQ[m, n], Less[n, 0], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Plus[a, Times[b, x]], Power[Times[b, d, ProductLog[Plus[a, Times[b, x]]]], -1]], x], FreeQ[List[a, b, d], x]]], RuleDelayed[HoldPattern[Int[Times[ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[d, x], x], Times[-1, Int[Times[1, Power[Plus[d, Times[d, ProductLog[Plus[a, Times[b, x]]]]], -1]], x]]], FreeQ[List[a, b, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[c, Plus[a, Times[b, x]], Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], Plus[p, -1]], Power[Times[b, d], -1]], x], Times[-1, Dist[Times[c, p], Int[Times[Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], Plus[p, -1]], Power[Plus[d, Times[d, ProductLog[Plus[a, Times[b, x]]]]], -1]], x], x]]], And[FreeQ[List[a, b, c, d], x], RationalQ[p], Greater[p, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], -1], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[ExpIntegralEi[ProductLog[Plus[a, Times[b, x]]]], Power[Times[b, d], -1]], x], FreeQ[List[a, b, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Rational[-1, 2]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Rt[Times[Pi, c], 2], Erfi[Times[Sqrt[Times[c, ProductLog[Plus[a, Times[b, x]]]]], Power[Rt[c, 2], -1]]], Power[Times[b, c, d], -1]], x], And[FreeQ[List[a, b, c, d], x], PosQ[c]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Rational[-1, 2]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Rt[Times[-1, Pi, c], 2], Erf[Times[Sqrt[Times[c, ProductLog[Plus[a, Times[b, x]]]]], Power[Rt[Times[-1, c], 2], -1]]], Power[Times[b, c, d], -1]], x], And[FreeQ[List[a, b, c, d], x], NegQ[c]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Plus[a, Times[b, x]], Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], p], Power[Times[b, d, Plus[p, 1]], -1]], x], Times[-1, Dist[Times[1, Power[Times[c, Plus[p, 1]], -1]], Int[Times[Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], Plus[p, 1]], Power[Plus[d, Times[d, ProductLog[Plus[a, Times[b, x]]]]], -1]], x], x]]], And[FreeQ[List[a, b, c, d], x], RationalQ[p], Less[p, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Gamma[Plus[p, 1], Times[-1, ProductLog[Plus[a, Times[b, x]]]]], Power[Times[c, ProductLog[Plus[a, Times[b, x]]]], p], Power[Times[b, d, Power[Times[-1, ProductLog[Plus[a, Times[b, x]]]], p]], -1]], x], FreeQ[List[a, b, c, d, p], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[ExpandIntegrand[Times[1, Power[Plus[d, Times[d, ProductLog[x]]], -1]], Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], x], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b, d], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[b, -1]], Subst[Int[ExpandIntegrand[Times[Power[Times[c, ProductLog[x]], p], Power[Plus[d, Times[d, ProductLog[x]]], -1]], Power[Plus[Times[-1, a, Power[b, -1]], Times[x, Power[b, -1]]], m], x], x], x, Plus[a, Times[b, x]]], x], And[FreeQ[List[a, b, c, d, p], x], PositiveIntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[1, Power[Times[Power[x, 2], Plus[d, Times[d, ProductLog[Times[a, Power[x, Times[-1, n]]]]]]], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, d], x], NegativeIntegerQ[n]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[c, x, Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[d, -1]], x], And[FreeQ[List[a, c, d, n, p], x], ZeroQ[Plus[Times[n, Plus[p, -1]], 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[a, p], ExpIntegralEi[Times[-1, p, ProductLog[Times[a, Power[x, n]]]]], Power[Times[d, n], -1]], x], And[FreeQ[List[a, d], x], IntegerQ[Times[1, Power[n, -1]]], ZeroQ[Plus[p, Times[1, Power[n, -1]]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Rt[Times[Pi, c, n], 2], Power[Times[d, n, Power[a, Times[1, Power[n, -1]]], Power[c, Times[1, Power[n, -1]]]], -1], Erfi[Times[Sqrt[Times[c, ProductLog[Times[a, Power[x, n]]]]], Power[Rt[Times[c, n], 2], -1]]]], x], And[FreeQ[List[a, c, d], x], IntegerQ[Times[1, Power[n, -1]]], ZeroQ[Plus[p, Times[-1, 1, Power[2, -1]], Times[1, Power[n, -1]]]], PosQ[Times[c, n]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Rt[Times[-1, Pi, c, n], 2], Power[Times[d, n, Power[a, Times[1, Power[n, -1]]], Power[c, Times[1, Power[n, -1]]]], -1], Erf[Times[Sqrt[Times[c, ProductLog[Times[a, Power[x, n]]]]], Power[Rt[Times[-1, c, n], 2], -1]]]], x], And[FreeQ[List[a, c, d], x], IntegerQ[Times[1, Power[n, -1]]], ZeroQ[Plus[p, Times[-1, 1, Power[2, -1]], Times[1, Power[n, -1]]]], NegQ[Times[c, n]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[c, x, Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[d, -1]], x], Times[-1, Dist[Times[c, Plus[Times[n, Plus[p, -1]], 1]], Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[Plus[d, Times[d, ProductLog[Times[a, Power[x, n]]]]], -1]], x], x]]], And[FreeQ[List[a, c, d], x], RationalQ[n, p], Greater[n, 0], Greater[Plus[Times[n, Plus[p, -1]], 1], 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[x, Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Times[d, Plus[Times[n, p], 1]], -1]], x], Times[-1, Dist[Times[1, Power[Times[c, Plus[Times[n, p], 1]], -1]], Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, 1]], Power[Plus[d, Times[d, ProductLog[Times[a, Power[x, n]]]]], -1]], x], x]]], And[FreeQ[List[a, c, d], x], RationalQ[n, p], Greater[n, 0], Less[Plus[Times[n, p], 1], 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, Times[-1, n]]]]], p], Power[Times[Power[x, 2], Plus[d, Times[d, ProductLog[Times[a, Power[x, Times[-1, n]]]]]]], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, c, d, p], x], NegativeIntegerQ[n]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Times[d, Plus[m, 1], ProductLog[Times[a, x]]], -1]], x], Times[-1, Dist[Times[m, Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Power[Times[ProductLog[Times[a, x]], Plus[d, Times[d, ProductLog[Times[a, x]]]]], -1]], x], x]]], And[FreeQ[List[a, d], x], RationalQ[m], Greater[m, 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Log[ProductLog[Times[a, x]]], Power[d, -1]], x], FreeQ[List[a, d], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Times[d, Plus[m, 1]], -1]], x], Times[-1, Int[Times[Power[x, m], ProductLog[Times[a, x]], Power[Plus[d, Times[d, ProductLog[Times[a, x]]]], -1]], x]]], And[FreeQ[List[a, d], x], RationalQ[m], Less[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[x, m], Gamma[Plus[m, 1], Times[-1, Plus[m, 1], ProductLog[Times[a, x]]]], Power[Times[a, d, Plus[m, 1], Power[E, Times[m, ProductLog[Times[a, x]]]], Power[Times[-1, Plus[m, 1], ProductLog[Times[a, x]]], m]], -1]], x], And[FreeQ[List[a, d, m], x], Not[IntegerQ[m]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Log[ProductLog[Times[a, Power[x, n]]]], Power[Times[d, n], -1]], x], FreeQ[List[a, d, n], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[1, Power[Times[Power[x, Plus[m, 2]], Plus[d, Times[d, ProductLog[Times[a, Power[x, Times[-1, n]]]]]]], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, d], x], IntegersQ[m, n], Less[n, 0], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], -1], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Times[d, n, p], -1]], x], FreeQ[List[a, c, d, n, p], x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[c, Power[x, Plus[m, 1]], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[Times[d, Plus[m, 1]], -1]], x], And[FreeQ[List[a, c, d, m, n, p], x], NonzeroQ[Plus[m, 1]], ZeroQ[Plus[m, Times[n, Plus[p, -1]], 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[a, p], ExpIntegralEi[Times[-1, p, ProductLog[Times[a, Power[x, n]]]]], Power[Times[d, n], -1]], x], And[FreeQ[List[a, d, m, n], x], IntegerQ[p], ZeroQ[Plus[m, Times[n, p], 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[a, Plus[p, Times[-1, 1, Power[2, -1]]]], Power[c, Plus[p, Times[-1, 1, Power[2, -1]]]], Rt[Times[Pi, c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]], 2], Erf[Times[Sqrt[Times[c, ProductLog[Times[a, Power[x, n]]]]], Power[Rt[Times[c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]], 2], -1]]], Power[Times[d, n], -1]], x], And[FreeQ[List[a, c, d, m, n], x], NonzeroQ[Plus[m, 1]], IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], ZeroQ[Plus[m, Times[n, Plus[p, Times[-1, 1, Power[2, -1]]]], 1]], PosQ[Times[c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[a, Plus[p, Times[-1, 1, Power[2, -1]]]], Power[c, Plus[p, Times[-1, 1, Power[2, -1]]]], Rt[Times[-1, Pi, c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]], 2], Erfi[Times[Sqrt[Times[c, ProductLog[Times[a, Power[x, n]]]]], Power[Rt[Times[-1, c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]], 2], -1]]], Power[Times[d, n], -1]], x], And[FreeQ[List[a, c, d, m, n], x], NonzeroQ[Plus[m, 1]], IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]], ZeroQ[Plus[m, Times[n, Plus[p, Times[-1, 1, Power[2, -1]]]], 1]], NegQ[Times[c, Power[Plus[p, Times[-1, 1, Power[2, -1]]], -1]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[c, Power[x, Plus[m, 1]], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[Times[d, Plus[m, 1]], -1]], x], Times[-1, Dist[Times[c, Plus[m, Times[n, Plus[p, -1]], 1], Power[Plus[m, 1], -1]], Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, -1]], Power[Plus[d, Times[d, ProductLog[Times[a, Power[x, n]]]]], -1]], x], x]]], And[FreeQ[List[a, c, d, m, n, p], x], NonzeroQ[Plus[m, 1]], RationalQ[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]]], Greater[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Plus[Simp[Times[Power[x, Plus[m, 1]], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], p], Power[Times[d, Plus[m, Times[n, p], 1]], -1]], x], Times[-1, Dist[Times[Plus[m, 1], Power[Times[c, Plus[m, Times[n, p], 1]], -1]], Int[Times[Power[x, m], Power[Times[c, ProductLog[Times[a, Power[x, n]]]], Plus[p, 1]], Power[Plus[d, Times[d, ProductLog[Times[a, Power[x, n]]]]], -1]], x], x]]], And[FreeQ[List[a, c, d, m, n, p], x], NonzeroQ[Plus[m, 1]], RationalQ[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]]], Less[Simplify[Plus[p, Times[Plus[m, 1], Power[n, -1]]]], 0]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Pattern[x, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[x, m], Gamma[Plus[m, p, 1], Times[-1, Plus[m, 1], ProductLog[Times[a, x]]]], Power[Times[c, ProductLog[Times[a, x]]], p], Power[Times[a, d, Plus[m, 1], Power[E, Times[m, ProductLog[Times[a, x]]]], Power[Times[-1, Plus[m, 1], ProductLog[Times[a, x]]], Plus[m, p]]], -1]], x], And[FreeQ[List[a, c, d, m, p], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Optional[Pattern[c, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[d, Blank[]]], ProductLog[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Times[-1, Subst[Int[Times[Power[Times[c, ProductLog[Times[a, Power[x, Times[-1, n]]]]], p], Power[Times[Power[x, Plus[m, 2]], Plus[d, Times[d, ProductLog[Times[a, Power[x, Times[-1, n]]]]]]], -1]], x], x, Times[1, Power[x, -1]]]], And[FreeQ[List[a, c, d, p], x], NonzeroQ[Plus[m, 1]], IntegersQ[m, n], Less[n, 0]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Condition[Subst[Int[SimplifyIntegrand[Times[Plus[x, 1], Power[E, x], SubstFor[ProductLog[x], u, x]], x], x], x, ProductLog[x]], FunctionOfQ[ProductLog[x], u, x]]]]