List[RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[n, Blank[]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[c, IntPart[p]], Power[Times[c, Power[Plus[a, Times[b, x]], n]], FracPart[p]], Power[Power[Plus[a, Times[b, x]], Times[n, FracPart[p]]], -1]], Int[Times[u, Power[Plus[a, Times[b, x]], Times[n, p]]], x], x], And[FreeQ[List[a, b, c, n, p], x], Not[IntegerQ[p]], Not[MatchQ[u, Condition[Times[Power[x, Optional[Pattern[n1, Blank[]]]], Optional[Pattern[v, Blank[]]]], ZeroQ[Simplify[Plus[n, Times[-1, n1], -1]]]]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[c, Blank[]]], Power[Times[Pattern[d, Blank[]], Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[q, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Times[c, Power[Times[d, Plus[a, Times[b, x]]], p]], q], Power[Power[Plus[a, Times[b, x]], Times[p, q]], -1]], Int[Times[u, Power[Plus[a, Times[b, x]], Times[p, q]]], x], x], And[FreeQ[List[a, b, c, d, p, q], x], Not[IntegerQ[p]], Not[IntegerQ[q]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[c, Blank[]]], Power[Times[Optional[Pattern[d, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]]], Pattern[n, Blank[]]]], Pattern[p, Blank[]]]], Pattern[q, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Times[c, Power[Times[d, Power[Plus[a, Times[b, x]], n]], p]], q], Power[Power[Plus[a, Times[b, x]], Times[n, p, q]], -1]], Int[Times[u, Power[Plus[a, Times[b, x]], Times[n, p, q]]], x], x], And[FreeQ[List[a, b, c, d, n, p, q], x], Not[IntegerQ[p]], Not[IntegerQ[q]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[A, Blank[]]], Times[Optional[Pattern[B, Blank[]]], Pattern[x, Blank[]]], Times[Optional[Pattern[C, Blank[]]], Power[Pattern[x, Blank[]], 2]]], -1], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[F, Blank[]][Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[d, Blank[]]], Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], Rational[1, 2]], Power[Plus[Optional[Pattern[f, Blank[]]], Times[Optional[Pattern[g, Blank[]]], Pattern[x, Blank[]]]], Rational[-1, 2]]]]]], Optional[Pattern[n, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[g, Power[C, -1]], Subst[Int[Times[Power[Plus[a, Times[b, F[Times[c, x]]]], n], Power[x, -1]], x], x, Times[Sqrt[Plus[d, Times[e, x]]], Power[Sqrt[Plus[f, Times[g, x]]], -1]]], x], And[FreeQ[List[a, b, c, d, e, f, g, A, B, C, F], x], ZeroQ[Plus[e, g]], ZeroQ[Plus[d, f, -2]], ZeroQ[Plus[Times[A, Power[e, 2]], Times[C, d, f]]], ZeroQ[Plus[Times[2, C, Plus[d, -1]], Times[-1, B, e]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[A, Blank[]]], Times[Optional[Pattern[C, Blank[]]], Power[Pattern[x, Blank[]], 2]]], -1], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[F, Blank[]][Times[Optional[Pattern[c, Blank[]]], Power[Plus[1, Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], Rational[1, 2]], Power[Plus[1, Times[Optional[Pattern[g, Blank[]]], Pattern[x, Blank[]]]], Rational[-1, 2]]]]]], Optional[Pattern[n, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[g, Power[C, -1]], Subst[Int[Times[Power[Plus[a, Times[b, F[Times[c, x]]]], n], Power[x, -1]], x], x, Times[Sqrt[Plus[1, Times[e, x]]], Power[Sqrt[Plus[1, Times[g, x]]], -1]]], x], And[FreeQ[List[a, b, c, e, g, A, C, F], x], ZeroQ[Plus[e, g]], ZeroQ[Plus[Times[A, Power[e, 2]], C]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[F, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Plus[Optional[Pattern[d, Blank[]]], Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], Rational[1, 2]], Power[Plus[Optional[Pattern[f, Blank[]]], Times[Optional[Pattern[g, Blank[]]], Pattern[x, Blank[]]]], Rational[-1, 2]]]]]], Optional[Pattern[n, Blank[]]]], Power[Plus[Optional[Pattern[A, Blank[]]], Times[Optional[Pattern[B, Blank[]]], Pattern[x, Blank[]]], Times[Optional[Pattern[C, Blank[]]], Power[Pattern[x, Blank[]], 2]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[g, Power[C, -1]], Subst[Int[Times[Power[Plus[a, Times[b, Power[F, Times[c, x]]]], n], Power[x, -1]], x], x, Times[Sqrt[Plus[d, Times[e, x]]], Power[Sqrt[Plus[f, Times[g, x]]], -1]]], x], And[FreeQ[List[a, b, c, d, e, f, g, A, B, C, F], x], ZeroQ[Plus[e, g]], ZeroQ[Plus[d, f, -2]], ZeroQ[Plus[Times[A, Power[e, 2]], Times[C, d, f]]], ZeroQ[Plus[Times[2, C, Plus[d, -1]], Times[-1, B, e]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[F, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Plus[1, Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], Rational[1, 2]], Power[Plus[1, Times[Optional[Pattern[g, Blank[]]], Pattern[x, Blank[]]]], Rational[-1, 2]]]]]], Optional[Pattern[n, Blank[]]]], Power[Plus[Optional[Pattern[A, Blank[]]], Times[Optional[Pattern[C, Blank[]]], Power[Pattern[x, Blank[]], 2]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[g, Power[C, -1]], Subst[Int[Times[Power[Plus[a, Times[b, Power[F, Times[c, x]]]], n], Power[x, -1]], x], x, Times[Sqrt[Plus[1, Times[e, x]]], Power[Sqrt[Plus[1, Times[g, x]]], -1]]], x], And[FreeQ[List[a, b, c, e, g, A, C, F], x], ZeroQ[Plus[e, g]], ZeroQ[Plus[Times[A, Power[e, 2]], C]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[y, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Simp[Times[q, Log[RemoveContent[y, x]]], x], Not[FalseQ[q]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[w, Blank[]], -1], Power[Pattern[y, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Module[List[Set[q, DerivativeDivides[Times[y, w], u, x]]], Condition[Simp[Times[q, Log[RemoveContent[Times[y, w], x]]], x], Not[FalseQ[q]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[y, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Simp[Times[q, Power[y, Plus[m, 1]], Power[Plus[m, 1], -1]], x], Not[FalseQ[q]]]], And[FreeQ[m, x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[y, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Pattern[z, Blank[]], Optional[Pattern[n, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[Times[y, z], Times[u, Power[z, Plus[n, Times[-1, m]]]], x]]], Condition[Simp[Times[q, Power[y, Plus[m, 1]], Power[z, Plus[m, 1]], Power[Plus[m, 1], -1]], x], Not[FalseQ[q]]]], And[FreeQ[List[m, n], x], NonzeroQ[Plus[m, 1]]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[v, SimplifyIntegrand[u, x]]], Condition[Int[v, x], SimplerIntegrandQ[v, u, x]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[e, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Rational[1, 2]]], Times[Optional[Pattern[f, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Rational[1, 2]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Plus[Times[a, Power[e, 2]], Times[-1, c, Power[f, 2]]], m], Int[ExpandIntegrand[Times[u, Power[Plus[Times[e, Sqrt[Plus[a, Times[b, Power[x, n]]]]], Times[-1, f, Sqrt[Plus[c, Times[d, Power[x, n]]]]]], Times[-1, m]]], x], x], x], And[FreeQ[List[a, b, c, d, e, f, n], x], NegativeIntegerQ[m], ZeroQ[Plus[Times[b, Power[e, 2]], Times[-1, d, Power[f, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[e, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Rational[1, 2]]], Times[Optional[Pattern[f, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Rational[1, 2]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Plus[Times[b, Power[e, 2]], Times[-1, d, Power[f, 2]]], m], Int[ExpandIntegrand[Times[u, Power[x, Times[m, n]], Power[Plus[Times[e, Sqrt[Plus[a, Times[b, Power[x, n]]]]], Times[-1, f, Sqrt[Plus[c, Times[d, Power[x, n]]]]]], Times[-1, m]]], x], x], x], And[FreeQ[List[a, b, c, d, e, f, n], x], NegativeIntegerQ[m], ZeroQ[Plus[Times[a, Power[e, 2]], Times[-1, c, Power[f, 2]]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[u, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[u, Blank[]], Pattern[n, Blank[]]]], Pattern[v, Blank[]]], Optional[Pattern[p, Blank[]]]], Pattern[w, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[Power[u, Plus[m, Times[n, p]]], Power[Plus[a, Times[Power[u, Times[-1, n]], v]], p], w], x], And[FreeQ[List[a, m, n], x], IntegerQ[p], Not[PositiveQ[n]], Not[FreeQ[v, x]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[n, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[y, Blank[]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], n]], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, b, c, d, m, n], x], ZeroQ[Plus[y, Times[-1, v]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[n, Blank[]]]], Power[Plus[Optional[Pattern[e, Blank[]]], Times[Optional[Pattern[f, Blank[]]], Pattern[w, Blank[]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[y, Blank[]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], n], Power[Plus[e, Times[f, x]], p]], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, b, c, d, e, f, m, n, p], x], ZeroQ[Plus[y, Times[-1, v]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[n, Blank[]]]], Power[Plus[Optional[Pattern[e, Blank[]]], Times[Optional[Pattern[f, Blank[]]], Pattern[w, Blank[]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[y, Blank[]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[g, Blank[]]], Times[Optional[Pattern[h, Blank[]]], Pattern[z, Blank[]]]], Optional[Pattern[q, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[r, DerivativeDivides[y, u, x]]], Condition[Dist[r, Subst[Int[Times[Power[Plus[a, Times[b, x]], m], Power[Plus[c, Times[d, x]], n], Power[Plus[e, Times[f, x]], p], Power[Plus[g, Times[h, x]], q]], x], x, y], x], Not[FalseQ[r]]]], And[FreeQ[List[a, b, c, d, e, f, g, h, m, n, p, q], x], ZeroQ[Plus[y, Times[-1, v]]], ZeroQ[Plus[y, Times[-1, w]]], ZeroQ[Plus[y, Times[-1, z]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Plus[Dist[a, Int[u, x], x], Dist[Times[b, q], Subst[Int[Power[x, n], x], x, y], x]], Not[FalseQ[q]]]], FreeQ[List[a, b, n], x]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Power[Plus[a, Times[b, Power[x, n]]], p], x], x, y], x], Not[FalseQ[q]]]], FreeQ[List[a, b, n, p], x]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q, r], Condition[Dist[Times[q, r], Subst[Int[Times[Power[x, m], Power[Plus[a, Times[b, Power[x, n]]], p]], x], x, y], x], And[Not[FalseQ[Set[r, Divides[Power[y, m], Power[v, m], x]]]], Not[FalseQ[Set[q, DerivativeDivides[y, u, x]]]]]]], FreeQ[List[a, b, m, n, p], x]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[n2, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, v]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Plus[Pattern[A, Blank[]], Times[Optional[Pattern[B, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Times[Plus[A, Times[B, Power[x, n]]], Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p]], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, b, c, A, B, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, v]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Plus[Pattern[A, Blank[]], Times[Optional[Pattern[B, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Times[Plus[A, Times[B, Power[x, n]]], Power[Plus[a, Times[c, Power[x, Times[2, n]]]], p]], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, c, A, B, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[n2, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q, r], Condition[Dist[Times[q, r], Subst[Int[Times[Power[x, m], Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p]], x], x, y], x], And[Not[FalseQ[Set[r, Divides[Power[y, m], Power[v, m], x]]]], Not[FalseQ[Set[q, DerivativeDivides[y, u, x]]]]]]], And[FreeQ[List[a, b, c, m, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Plus[Pattern[A, Blank[]], Times[Optional[Pattern[B, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Power[Pattern[z, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q, r], Condition[Dist[Times[q, r], Subst[Int[Times[Power[x, m], Plus[A, Times[B, Power[x, n]]], Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p]], x], x, y], x], And[Not[FalseQ[Set[r, Divides[Power[y, m], Power[z, m], x]]]], Not[FalseQ[Set[q, DerivativeDivides[y, u, x]]]]]]], And[FreeQ[List[a, b, c, A, B, m, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, v]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Plus[Pattern[A, Blank[]], Times[Optional[Pattern[B, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Power[Pattern[z, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[q, r], Condition[Dist[Times[q, r], Subst[Int[Times[Power[x, m], Plus[A, Times[B, Power[x, n]]], Power[Plus[a, Times[c, Power[x, Times[2, n]]]], p]], x], x, y], x], And[Not[FalseQ[Set[r, Divides[Power[y, m], Power[z, m], x]]]], Not[FalseQ[Set[q, DerivativeDivides[y, u, x]]]]]]], And[FreeQ[List[a, c, A, B, m, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[y, u, x]]], Condition[Dist[q, Subst[Int[Times[Power[Plus[a, Times[b, Power[x, n]]], m], Power[Plus[c, Times[d, Power[x, n]]], p]], x], x, y], x], Not[FalseQ[q]]]], And[FreeQ[List[a, b, c, d, m, n, p], x], ZeroQ[Plus[y, Times[-1, v]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Optional[Pattern[e, Blank[]]], Times[Optional[Pattern[f, Blank[]]], Power[Pattern[w, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[q, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[y, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[r, DerivativeDivides[y, u, x]]], Condition[Dist[r, Subst[Int[Times[Power[Plus[a, Times[b, Power[x, n]]], m], Power[Plus[c, Times[d, Power[x, n]]], p], Power[Plus[e, Times[f, Power[x, n]]], q]], x], x, y], x], Not[FalseQ[r]]]], And[FreeQ[List[a, b, c, d, e, f, m, n, p, q], x], ZeroQ[Plus[y, Times[-1, v]]], ZeroQ[Plus[y, Times[-1, w]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[F, Blank[]], Pattern[v, Blank[]]], Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[v, u, x]]], Condition[Simp[Times[q, Power[F, v], Power[Log[F], -1]], x], Not[FalseQ[q]]]], FreeQ[F, x]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[F, Blank[]], Pattern[v, Blank[]]], Pattern[u, Blank[]], Power[Pattern[w, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[q, DerivativeDivides[v, u, x]]], Condition[Dist[q, Subst[Int[Times[Power[x, m], Power[F, x]], x], x, v], x], Not[FalseQ[q]]]], And[FreeQ[List[F, m], x], ZeroQ[Plus[w, Times[-1, v]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[p, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[w, D[v, x]], Times[v, D[w, x]]], -1]]]]], Condition[Dist[c, Subst[Int[Power[Plus[a, Times[b, Power[x, p]]], m], x], x, Times[v, w]], x], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p], x], IntegerQ[p]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Optional[Pattern[r, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[q, v, D[w, x]]], -1]]]]], Condition[Dist[Times[c, p, Power[Plus[r, 1], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, Times[p, Power[Plus[r, 1], -1]]]]], m], x], x, Times[Power[v, Plus[r, 1]], w]], x], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q, r], x], ZeroQ[Plus[p, Times[-1, q, Plus[r, 1]]]], NonzeroQ[Plus[r, 1]], IntegerQ[Times[p, Power[Plus[r, 1], -1]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Optional[Pattern[r, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[s, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[q, v, D[w, x]]], -1]]]]], Condition[Dist[Times[c, p, Power[Plus[r, 1], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, Times[p, Power[Plus[r, 1], -1]]]]], m], x], x, Times[Power[v, Plus[r, 1]], Power[w, Plus[s, 1]]]], x], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q, r, s], x], ZeroQ[Plus[Times[p, Plus[s, 1]], Times[-1, q, Plus[r, 1]]]], NonzeroQ[Plus[r, 1]], IntegerQ[Times[p, Power[Plus[r, 1], -1]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[-1, q, v, D[w, x]]], -1]]]]], Condition[Dist[Times[c, p], Subst[Int[Power[Plus[b, Times[a, Power[x, p]]], m], x], x, Times[v, Power[w, Plus[Times[m, q], 1]]]], x], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q], x], ZeroQ[Plus[p, Times[q, Plus[Times[m, p], 1]]]], IntegerQ[p], IntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Optional[Pattern[r, Blank[]]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[-1, q, v, D[w, x]]], -1]]]]], Condition[Times[-1, Dist[Times[c, q], Subst[Int[Power[Plus[a, Times[b, Power[x, q]]], m], x], x, Times[Power[v, Plus[Times[m, p], r, 1]], w]], x]], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q, r], x], ZeroQ[Plus[p, Times[q, Plus[Times[m, p], r, 1]]]], IntegerQ[q], IntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[w, Blank[]], Optional[Pattern[s, Blank[]]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[-1, q, v, D[w, x]]], -1]]]]], Condition[Times[-1, Dist[Times[c, q, Power[Plus[s, 1], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, Times[q, Power[Plus[s, 1], -1]]]]], m], x], x, Times[Power[v, Plus[Times[m, p], 1]], Power[w, Plus[s, 1]]]], x]], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q, s], x], ZeroQ[Plus[Times[p, Plus[s, 1]], Times[q, Plus[Times[m, p], 1]]]], NonzeroQ[Plus[s, 1]], IntegerQ[Times[q, Power[Plus[s, 1], -1]]], IntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[v, Blank[]], Optional[Pattern[r, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[s, Blank[]]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[w, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[c, Simplify[Times[u, Power[Plus[Times[p, w, D[v, x]], Times[-1, q, v, D[w, x]]], -1]]]]], Condition[Times[-1, Dist[Times[c, q, Power[Plus[s, 1], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, Times[q, Power[Plus[s, 1], -1]]]]], m], x], x, Times[Power[v, Plus[Times[m, p], r, 1]], Power[w, Plus[s, 1]]]], x]], FreeQ[c, x]]], And[FreeQ[List[a, b, m, p, q, r, s], x], ZeroQ[Plus[Times[p, Plus[s, 1]], Times[q, Plus[Times[m, p], r, 1]]]], NonzeroQ[Plus[s, 1]], IntegerQ[Times[q, Power[Plus[s, 1], -1]]], IntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Plus[m, 1], -1]], Subst[Int[SubstFor[Power[x, Plus[m, 1]], u, x], x], x, Power[x, Plus[m, 1]]], x], And[FreeQ[m, x], NonzeroQ[Plus[m, 1]], FunctionOfQ[Power[x, Plus[m, 1]], u, x]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[lst, SubstForFractionalPowerOfLinear[u, x]]], Condition[Dist[Times[Part[lst, 2], Part[lst, 4]], Subst[Int[Part[lst, 1], x], x, Power[Part[lst, 3], Times[1, Power[Part[lst, 2], -1]]]], x], And[Not[FalseQ[lst]], SubstForFractionalPowerQ[u, Part[lst, 3], x]]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[lst, SubstForFractionalPowerOfQuotientOfLinears[u, x]]], Condition[Dist[Times[Part[lst, 2], Part[lst, 4]], Subst[Int[Part[lst, 1], x], x, Power[Part[lst, 3], Times[1, Power[Part[lst, 2], -1]]]], x], Not[FalseQ[lst]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[n, Blank[]]]], Power[Pattern[z, Blank[]], Optional[Pattern[q, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, IntPart[p]], Power[Times[a, Power[v, m], Power[w, n], Power[z, q]], FracPart[p]], Power[Times[Power[v, Times[m, FracPart[p]]], Power[w, Times[n, FracPart[p]]], Power[z, Times[q, FracPart[p]]]], -1]], Int[Times[u, Power[v, Times[m, p]], Power[w, Times[n, p]], Power[z, Times[p, q]]], x], x], And[FreeQ[List[a, m, n, p, q], x], Not[IntegerQ[p]], Not[FreeQ[v, x]], Not[FreeQ[w, x]], Not[FreeQ[z, x]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Pattern[w, Blank[]], Optional[Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, IntPart[p]], Power[Times[a, Power[v, m], Power[w, n]], FracPart[p]], Power[Times[Power[v, Times[m, FracPart[p]]], Power[w, Times[n, FracPart[p]]]], -1]], Int[Times[u, Power[v, Times[m, p]], Power[w, Times[n, p]]], x], x], And[FreeQ[List[a, m, n, p], x], Not[IntegerQ[p]], Not[FreeQ[v, x]], Not[FreeQ[w, x]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, IntPart[p]], Power[Times[a, Power[v, m]], FracPart[p]], Power[Power[v, Times[m, FracPart[p]]], -1]], Int[Times[u, Power[v, Times[m, p]]], x], x], And[FreeQ[List[a, m, p], x], Not[IntegerQ[p]], Not[FreeQ[v, x]], Not[And[EqQ[a, 1], EqQ[m, 1]]], Not[And[EqQ[v, x], EqQ[m, 1]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[FullSimplify[Times[Sqrt[Plus[a, Times[b, Power[x, n]]]], Power[Times[Power[x, Times[n, Power[2, -1]]], Sqrt[Plus[b, Times[a, Power[Power[x, n], -1]]]]], -1]]], Int[Times[u, Power[x, Times[n, p]], Power[Plus[b, Times[a, Power[x, Times[-1, n]]]], p]], x], x], And[FreeQ[List[a, b, p], x], IntegerQ[Plus[p, Times[1, Power[2, -1]]]], NegativeIntegerQ[n], Not[RationalFunctionQ[u, x]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Plus[a, Times[b, Power[v, n]]], FracPart[p]], Power[Times[Power[v, Times[n, FracPart[p]]], Power[Plus[b, Times[a, Power[v, Times[-1, n]]]], FracPart[p]]], -1]], Int[Times[u, Power[v, Times[n, p]], Power[Plus[b, Times[a, Power[v, Times[-1, n]]]], p]], x], x], And[FreeQ[List[a, b, p], x], Not[IntegerQ[p]], NegativeIntegerQ[n], BinomialQ[v, x], Not[LinearQ[v, x]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Plus[a, Times[b, Power[x, m], Power[v, n]]], FracPart[p]], Power[Times[Power[v, Times[n, FracPart[p]]], Power[Plus[Times[b, Power[x, m]], Times[a, Power[v, Times[-1, n]]]], FracPart[p]]], -1]], Int[Times[u, Power[v, Times[n, p]], Power[Plus[Times[b, Power[x, m]], Times[a, Power[v, Times[-1, n]]]], p]], x], x], And[FreeQ[List[a, b, m, p], x], Not[IntegerQ[p]], NegativeIntegerQ[n], BinomialQ[v, x]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[r, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[s, Blank[]]]]]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[v, Times[Power[Plus[Times[a, Power[x, r]], Times[b, Power[x, s]]], FracPart[m]], Power[Times[Power[x, Times[r, FracPart[m]]], Power[Plus[a, Times[b, Power[x, Plus[s, Times[-1, r]]]]], FracPart[m]]], -1]]]], Condition[Dist[v, Int[Times[u, Power[x, Times[m, r]], Power[Plus[a, Times[b, Power[x, Plus[s, Times[-1, r]]]]], m]], x], x], Not[EqQ[Simplify[v], 1]]]], And[FreeQ[List[a, b, m, r, s], x], Not[IntegerQ[m]], PosQ[Plus[s, Times[-1, r]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[v, RationalFunctionExpand[Times[u, Power[Plus[a, Times[b, Power[x, n]]], -1]], x]]], Condition[Int[v, x], SumQ[v]]], And[FreeQ[List[a, b], x], PositiveIntegerQ[n]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Times[Power[4, p], Power[c, p]], -1]], Int[Times[u, Power[Plus[b, Times[2, c, Power[x, n]]], Times[2, p]]], x], x], And[FreeQ[List[a, b, c, n], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[Power[b, 2], Times[-1, 4, a, c]]], IntegerQ[p], Not[AlgebraicFunctionQ[u, x]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p], Power[Power[Plus[b, Times[2, c, Power[x, n]]], Times[2, p]], -1]], Int[Times[u, Power[Plus[b, Times[2, c, Power[x, n]]], Times[2, p]]], x], x], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[Power[b, 2], Times[-1, 4, a, c]]], Not[IntegerQ[p]], Not[AlgebraicFunctionQ[u, x]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n2, Blank[]]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[With[List[Set[v, RationalFunctionExpand[Times[u, Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], -1]], x]]], Condition[Int[v, x], SumQ[v]]], And[FreeQ[List[a, b, c], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], PositiveIntegerQ[n]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]], Rational[1, 2]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Plus[Times[a, Power[x, m]], Times[-1, b, Sqrt[Times[c, Power[x, n]]]]], Power[Plus[Times[Power[a, 2], Power[x, Times[2, m]]], Times[-1, Power[b, 2], c, Power[x, n]]], -1]], x], FreeQ[List[a, b, c, m, n], x]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[lst, FunctionOfLinear[u, x]]], Condition[Dist[Times[1, Power[Part[lst, 3], -1]], Subst[Int[Part[lst, 1], x], x, Plus[Part[lst, 2], Times[Part[lst, 3], x]]], x], Not[FalseQ[lst]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[x, Blank[]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[lst, PowerVariableExpn[u, 0, x]]], Condition[Dist[Times[1, Power[Part[lst, 2], -1]], Subst[Int[NormalizeIntegrand[Simplify[Times[Part[lst, 1], Power[x, -1]]], x], x], x, Power[Times[Part[lst, 3], x], Part[lst, 2]]], x], And[Not[FalseQ[lst]], NonzeroQ[Part[lst, 2]]]]], And[NonsumQ[u], Not[RationalFunctionQ[u, x]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[lst, PowerVariableExpn[u, Plus[m, 1], x]]], Condition[Dist[Times[1, Power[Part[lst, 2], -1]], Subst[Int[NormalizeIntegrand[Simplify[Times[Part[lst, 1], Power[x, -1]]], x], x], x, Power[Times[Part[lst, 3], x], Part[lst, 2]]], x], And[Not[FalseQ[lst]], NonzeroQ[Plus[Part[lst, 2], Times[-1, m], -1]]]]], And[IntegerQ[m], Unequal[m, -1], NonsumQ[u], Or[Greater[m, 0], Not[AlgebraicFunctionQ[u, x]]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Pattern[x, Blank[]], Pattern[m, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[k, Denominator[m]]], Dist[k, Subst[Int[Times[Power[x, Plus[Times[k, Plus[m, 1]], -1]], ReplaceAll[u, Rule[x, Power[x, k]]]], x], x, Power[x, Times[1, Power[k, -1]]]], x]], FractionQ[m]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[lst, FunctionOfSquareRootOfQuadratic[u, x]]], Condition[Dist[2, Subst[Int[Part[lst, 1], x], x, Part[lst, 2]], x], Not[FalseQ[lst]]]], EulerIntegrandQ[u, x]]], RuleDelayed[HoldPattern[Int[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], 2]]], -1], Pattern[x, Blank[Symbol]]]], Condition[Plus[Dist[Times[1, Power[Times[2, a], -1]], Int[Together[Times[1, Power[Plus[1, Times[-1, v, Power[Rt[Times[-1, a, Power[b, -1]], 2], -1]]], -1]]], x], x], Dist[Times[1, Power[Times[2, a], -1]], Int[Together[Times[1, Power[Plus[1, Times[v, Power[Rt[Times[-1, a, Power[b, -1]], 2], -1]]], -1]]], x], x]], FreeQ[List[a, b], x]]], RuleDelayed[HoldPattern[Int[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[2, Power[Times[a, n], -1]], Sum[Int[Together[Times[1, Power[Plus[1, Times[-1, Power[v, 2], Power[Times[Power[-1, Times[4, k, Power[n, -1]]], Rt[Times[-1, a, Power[b, -1]], Times[n, Power[2, -1]]]], -1]]], -1]]], x], List[k, 1, Times[n, Power[2, -1]]]], x], And[FreeQ[List[a, b], x], EvenQ[n], Greater[n, 2]]]], RuleDelayed[HoldPattern[Int[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[v, Blank[]], Pattern[n, Blank[]]]]], -1], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Times[a, n], -1]], Sum[Int[Together[Times[1, Power[Plus[1, Times[-1, v, Power[Times[Power[-1, Times[2, k, Power[n, -1]]], Rt[Times[-1, a, Power[b, -1]], n]], -1]]], -1]]], x], List[k, 1, n]], x], And[FreeQ[List[a, b], x], OddQ[n], Greater[n, 1]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[u, Blank[]], Optional[Pattern[n, Blank[]]]]]], -1], Pattern[v, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Int[ReplaceAll[ExpandIntegrand[Times[PolynomialInSubst[v, u, x], Power[Plus[a, Times[b, Power[x, n]]], -1]], x], Rule[x, u]], x], And[FreeQ[List[a, b], x], PositiveIntegerQ[n], PolynomialInQ[v, u, x]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[v, NormalizeIntegrand[u, x]]], Condition[Int[v, x], UnsameQ[v, u]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[v, ExpandIntegrand[u, x]]], Condition[Int[v, x], SumQ[v]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Power[Plus[Optional[Pattern[c, Blank[]]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[q, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Plus[a, Times[b, Power[x, m]]], p], Power[Plus[c, Times[d, Power[x, n]]], q], Power[Power[x, Times[m, p]], -1]], Int[Times[u, Power[x, Times[m, p]]], x], x], And[FreeQ[List[a, b, c, d, m, n, p, q], x], ZeroQ[Plus[a, d]], ZeroQ[Plus[b, c]], ZeroQ[Plus[m, n]], ZeroQ[Plus[p, q]]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Sqrt[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]]], Power[Times[Power[Times[4, c], Plus[p, Times[-1, 1, Power[2, -1]]]], Plus[b, Times[2, c, Power[x, n]]]], -1]], Int[Times[u, Power[Plus[b, Times[2, c, Power[x, n]]], Times[2, p]]], x], x], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[Power[b, 2], Times[-1, 4, a, c]]], IntegerQ[Plus[p, Times[-1, 1, Power[2, -1]]]]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Module[List[Set[lst, SubstForFractionalPowerOfLinear[u, x]]], Condition[Dist[Times[Part[lst, 2], Part[lst, 4]], Subst[Int[Part[lst, 1], x], x, Power[Part[lst, 3], Times[1, Power[Part[lst, 2], -1]]]], x], Not[FalseQ[lst]]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[]]]], Int[u, x]]]