List[RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Times[b, Power[x, n]], p]], x], And[FreeQ[List[a, b, n, p], x], ZeroQ[a]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[a, p]], x], And[FreeQ[List[a, b, n, p], x], ZeroQ[b]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Plus[Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p]], x], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[j, Times[-1, 2, n]]], ZeroQ[a]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Plus[a, Times[c, Power[x, Times[2, n]]]], p]], x], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[j, Times[-1, 2, n]]], ZeroQ[b]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[j, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Plus[a, Times[b, Power[x, n]]], p]], x], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[j, Times[-1, 2, n]]], ZeroQ[c]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Optional[Pattern[w, Blank[]]], Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Plus[Times[Plus[a, b], v], w], p]], x], And[FreeQ[List[a, b], x], Not[FreeQ[v, x]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[Pm, Blank[]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[Pm, Simplify[p]]], x], And[PolyQ[Pm, x], Not[RationalQ[p]], FreeQ[p, x], RationalQ[Simplify[p]]]]], RuleDelayed[HoldPattern[Int[Pattern[a, Blank[]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[a, x], x], FreeQ[a, x]]], RuleDelayed[HoldPattern[Int[Times[Pattern[a, Blank[]], Plus[Pattern[b, Blank[]], Times[Optional[Pattern[c, Blank[]]], Pattern[x, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[a, Power[Plus[b, Times[c, x]], 2], Power[Times[2, c], -1]], x], FreeQ[List[a, b, c], x]]], RuleDelayed[HoldPattern[Int[Times[-1, Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Dist[Identity[-1], Int[u, x], x]], RuleDelayed[HoldPattern[Int[Times[Complex[0, Pattern[a, Blank[]]], Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Complex[Identity[0], a], Int[u, x], x], And[FreeQ[a, x], EqQ[Power[a, 2], 1]]]], RuleDelayed[HoldPattern[Int[Times[Pattern[a, Blank[]], Pattern[u, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[a, Int[u, x], x], And[FreeQ[a, x], Not[MatchQ[u, Condition[Times[Pattern[b, Blank[]], Pattern[v, Blank[]]], FreeQ[b, x]]]]]]], RuleDelayed[HoldPattern[Int[Pattern[u, Blank[]], Pattern[x, Blank[Symbol]]]], Condition[Simp[IntSum[u, x], x], SumQ[u]]], RuleDelayed[HoldPattern[Int[Times[Pattern[u, Blank[]], Power[Times[Optional[Pattern[c, Blank[]]], Pattern[x, Blank[]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[ExpandIntegrand[Times[Power[Times[c, x], m], u], x], x], And[FreeQ[List[c, m], x], SumQ[u], Not[MatchQ[u, Condition[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], And[FreeQ[List[a, b], x], InverseFunctionQ[v]]]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[v, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Times[Pattern[b, Blank[]], Pattern[v, Blank[]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Power[b, m], -1]], Int[Times[u, Power[Times[b, v], Plus[m, n]]], x], x], And[FreeQ[List[b, n], x], IntegerQ[m]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Pattern[m, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, Plus[m, Times[1, Power[2, -1]]]], Power[b, Plus[n, Times[-1, 1, Power[2, -1]]]], Sqrt[Times[b, v]], Power[Sqrt[Times[a, v]], -1]], Int[Times[u, Power[v, Plus[m, n]]], x], x], And[FreeQ[List[a, b, m], x], Not[IntegerQ[m]], PositiveIntegerQ[Plus[n, Times[1, Power[2, -1]]]], IntegerQ[Plus[m, n]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Pattern[m, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, Plus[m, Times[-1, 1, Power[2, -1]]]], Power[b, Plus[n, Times[1, Power[2, -1]]]], Sqrt[Times[a, v]], Power[Sqrt[Times[b, v]], -1]], Int[Times[u, Power[v, Plus[m, n]]], x], x], And[FreeQ[List[a, b, m], x], Not[IntegerQ[m]], NegativeIntegerQ[Plus[n, Times[-1, 1, Power[2, -1]]]], IntegerQ[Plus[m, n]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Pattern[m, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[a, Plus[m, n]], Power[Times[b, v], n], Power[Power[Times[a, v], n], -1]], Int[Times[u, Power[v, Plus[m, n]]], x], x], And[FreeQ[List[a, b, m, n], x], Not[IntegerQ[m]], Not[IntegerQ[n]], IntegerQ[Plus[m, n]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Pattern[m, Blank[]]], Power[Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[b, IntPart[n]], Power[Times[b, v], FracPart[n]], Power[Times[Power[a, IntPart[n]], Power[Times[a, v], FracPart[n]]], -1]], Int[Times[u, Power[Times[a, v], Plus[m, n]]], x], x], And[FreeQ[List[a, b, m, n], x], Not[IntegerQ[m]], Not[IntegerQ[n]], Not[IntegerQ[Plus[m, n]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Optional[Pattern[n, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Times[b, Power[d, -1]], m], Int[Times[u, Power[Plus[c, Times[d, v]], Plus[m, n]]], x], x], And[FreeQ[List[a, b, c, d, n], x], ZeroQ[Plus[Times[b, c], Times[-1, a, d]]], IntegerQ[m], Or[Not[IntegerQ[n]], SimplerQ[Plus[c, Times[d, x]], Plus[a, Times[b, x]]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], Pattern[m, Blank[]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Times[b, Power[d, -1]], m], Int[Times[u, Power[Plus[c, Times[d, v]], Plus[m, n]]], x], x], And[FreeQ[List[a, b, c, d, m, n], x], ZeroQ[Plus[Times[b, c], Times[-1, a, d]]], PositiveQ[Times[b, Power[d, -1]]], Not[Or[IntegerQ[m], IntegerQ[n]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], Pattern[m, Blank[]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Pattern[v, Blank[]]]], Pattern[n, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[Power[Plus[a, Times[b, v]], m], Power[Power[Plus[c, Times[d, v]], m], -1]], Int[Times[u, Power[Plus[c, Times[d, v]], Plus[m, n]]], x], x], And[FreeQ[List[a, b, c, d, m, n], x], ZeroQ[Plus[Times[b, c], Times[-1, a, d]]], Not[Or[IntegerQ[m], IntegerQ[n], PositiveQ[Times[b, Power[d, -1]]]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Times[Optional[Pattern[a, Blank[]]], Pattern[v, Blank[]]], Pattern[m, Blank[]]], Plus[Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[v, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[a, -1]], Int[Times[u, Power[Times[a, v], Plus[m, 1]], Plus[b, Times[c, v]]], x], x], And[FreeQ[List[a, b, c], x], RationalQ[m], LessEqual[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[v, Blank[]]]], Pattern[m, Blank[]]], Plus[Optional[Pattern[A, Blank[]]], Times[Optional[Pattern[B, Blank[]]], Pattern[v, Blank[]]], Times[Optional[Pattern[C, Blank[]]], Power[Pattern[v, Blank[]], 2]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Power[b, 2], -1]], Int[Times[u, Power[Plus[a, Times[b, v]], Plus[m, 1]], Simp[Plus[Times[b, B], Times[-1, a, C], Times[b, C, v]], x]], x], x], And[FreeQ[List[a, b, A, B, C], x], ZeroQ[Plus[Times[A, Power[b, 2]], Times[-1, a, b, B], Times[Power[a, 2], C]]], RationalQ[m], LessEqual[m, -1]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Times[d, Power[a, -1]], p], Int[Times[u, Power[Plus[a, Times[b, Power[x, n]]], Plus[m, p]], Power[Power[x, Times[n, p]], -1]], x], x], And[FreeQ[List[a, b, c, d, m, n], x], ZeroQ[Plus[n, q]], IntegerQ[p], ZeroQ[Plus[Times[a, c], Times[-1, b, d]]], Not[And[IntegerQ[m], NegQ[n]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[c, Blank[]], Times[Optional[Pattern[d, Blank[]]], Power[Pattern[x, Blank[]], Pattern[j, Blank[]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Power[Times[-1, Power[b, 2], Power[d, -1]], m], Int[Times[u, Power[Plus[a, Times[-1, b, Power[x, n]]], Times[-1, m]]], x], x], And[FreeQ[List[a, b, c, d, m, n, p], x], ZeroQ[Plus[j, Times[-1, 2, n]]], ZeroQ[Plus[m, p]], ZeroQ[Plus[Times[Power[b, 2], c], Times[Power[a, 2], d]]], PositiveQ[a], NegativeQ[d]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Cancel[Times[Power[Plus[Times[b, Power[2, -1]], Times[c, x]], Times[2, p]], Power[Power[c, p], -1]]]], x], And[FreeQ[List[a, b, c], x], ZeroQ[Plus[Power[b, 2], Times[-1, 4, a, c]]], IntegerQ[p]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n2, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[1, Power[Power[c, p], -1]], Int[Times[u, Power[Plus[Times[b, Power[2, -1]], Times[c, Power[x, n]]], Times[2, p]]], x], x], And[FreeQ[List[a, b, c, n], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], ZeroQ[Plus[Power[b, 2], Times[-1, 4, a, c]]], IntegerQ[p]]]], RuleDelayed[HoldPattern[Int[Times[Plus[Pattern[d, Blank[]], Times[Optional[Pattern[e, Blank[]]], Pattern[x, Blank[]]]], Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Pattern[x, Blank[]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], 2]]], Optional[Pattern[p, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Dist[Times[d, Power[b, -1]], Subst[Int[Power[x, p], x], x, Plus[a, Times[b, x], Times[c, Power[x, 2]]]], x], And[FreeQ[List[a, b, c, d, e, p], x], ZeroQ[Plus[Times[2, c, d], Times[-1, b, e]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[q, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[x, Times[m, p]], Power[Plus[a, Times[b, Power[x, Plus[q, Times[-1, p]]]]], m]], x], And[FreeQ[List[a, b, p, q], x], IntegerQ[m], PosQ[Plus[q, Times[-1, p]]]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Plus[Times[Optional[Pattern[a, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[p, Blank[]]]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[q, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[r, Blank[]]]]]], Optional[Pattern[m, Blank[]]]]], Pattern[x, Blank[Symbol]]]], Condition[Int[Times[u, Power[x, Times[m, p]], Power[Plus[a, Times[b, Power[x, Plus[q, Times[-1, p]]]], Times[c, Power[x, Plus[r, Times[-1, p]]]]], m]], x], And[FreeQ[List[a, b, c, p, q, r], x], IntegerQ[m], PosQ[Plus[q, Times[-1, p]]], PosQ[Plus[r, Times[-1, p]]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]], -1]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Log[RemoveContent[Plus[a, Times[b, Power[x, n]]], x]], Power[Times[b, n], -1]], x], And[FreeQ[List[a, b, m, n], x], ZeroQ[Plus[m, Times[-1, n], 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[a, Blank[]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[x, Blank[]], Pattern[n, Blank[]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[Plus[a, Times[b, Power[x, n]]], Plus[p, 1]], Power[Times[b, n, Plus[p, 1]], -1]], x], And[FreeQ[List[a, b, m, n, p], x], ZeroQ[Plus[m, Times[-1, n], 1]], NonzeroQ[Plus[p, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Pattern[x, Blank[]], Optional[Pattern[m, Blank[]]]], Power[Plus[Pattern[a1, Blank[]], Times[Optional[Pattern[b1, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]], Power[Plus[Pattern[a2, Blank[]], Times[Optional[Pattern[b2, Blank[]]], Power[Pattern[x, Blank[]], Optional[Pattern[n, Blank[]]]]]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Simp[Times[Power[Plus[a1, Times[b1, Power[x, n]]], Plus[p, 1]], Power[Plus[a2, Times[b2, Power[x, n]]], Plus[p, 1]], Power[Times[2, b1, b2, n, Plus[p, 1]], -1]], x], And[FreeQ[List[a1, b1, a2, b2, m, n, p], x], ZeroQ[Plus[Times[a2, b1], Times[a1, b2]]], ZeroQ[Plus[m, Times[-1, 2, n], 1]], NonzeroQ[Plus[p, 1]]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[Pm, Blank[]], Optional[Pattern[n, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[Qm, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[m, Expon[Pm, x]]], Condition[Dist[Times[Coeff[Qm, x, Plus[m, -1]], Power[Times[m, Coeff[Pm, x, m]], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, n]]], p], x], x, Pm], x], And[Equal[Expon[Qm, x], Plus[m, -1]], ZeroQ[Plus[Times[Coeff[Qm, x, Plus[m, -1]], D[Pm, x]], Times[-1, m, Coeff[Pm, x, m], Qm]]]]]], And[FreeQ[List[a, b, n, p], x], PolyQ[Pm, x], PolyQ[Qm, x]]]], RuleDelayed[HoldPattern[Int[Times[Power[Plus[Optional[Pattern[a, Blank[]]], Times[Optional[Pattern[b, Blank[]]], Power[Pattern[Pm, Blank[]], Optional[Pattern[n, Blank[]]]]], Times[Optional[Pattern[c, Blank[]]], Power[Pattern[Pm, Blank[]], Optional[Pattern[n2, Blank[]]]]]], Optional[Pattern[p, Blank[]]]], Pattern[Qm, Blank[]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[m, Expon[Pm, x]]], Condition[Dist[Times[Coeff[Qm, x, Plus[m, -1]], Power[Times[m, Coeff[Pm, x, m]], -1]], Subst[Int[Power[Plus[a, Times[b, Power[x, n]], Times[c, Power[x, Times[2, n]]]], p], x], x, Pm], x], And[Equal[Expon[Qm, x], Plus[m, -1]], ZeroQ[Plus[Times[Coeff[Qm, x, Plus[m, -1]], D[Pm, x]], Times[-1, m, Coeff[Pm, x, m], Qm]]]]]], And[FreeQ[List[a, b, c, n, p], x], ZeroQ[Plus[n2, Times[-1, 2, n]]], PolyQ[Pm, x], PolyQ[Qm, x]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Power[Pattern[Pq, Blank[]], Pattern[m, Blank[]]], Power[Pattern[Qr, Blank[]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[gcd, PolyGCD[Pq, Qr, x]]], Condition[Int[Times[u, Power[gcd, Plus[m, p]], Power[PolynomialQuotient[Pq, gcd, x], m], Power[PolynomialQuotient[Qr, gcd, x], p]], x], NonzeroQ[Plus[gcd, -1]]]], And[PositiveIntegerQ[m], NegativeIntegerQ[p], PolyQ[Pq, x], PolyQ[Qr, x]]]], RuleDelayed[HoldPattern[Int[Times[Optional[Pattern[u, Blank[]]], Pattern[Pq, Blank[]], Power[Pattern[Qr, Blank[]], Pattern[p, Blank[]]]], Pattern[x, Blank[Symbol]]]], Condition[Module[List[Set[gcd, PolyGCD[Pq, Qr, x]]], Condition[Int[Times[u, Power[gcd, Plus[p, 1]], PolynomialQuotient[Pq, gcd, x], Power[PolynomialQuotient[Qr, gcd, x], p]], x], NonzeroQ[Plus[gcd, -1]]]], And[NegativeIntegerQ[p], PolyQ[Pq, x], PolyQ[Qr, x]]]]]